name: CI - infra (hello world)

on:
  push:
    branches: [ "infra" ]
    paths:
      - "code/takata_frontend/**"
      - "code/takata_backend/**"
      - "infra/**"
      - ".github/workflows/**"
  pull_request:
    branches: [ "infra" ]
    paths:
      - "code/takata_frontend/**"
      - "code/takata_backend/**"
      - "infra/**"
      - ".github/workflows/**"

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository }}     # ex: ghcr.io/org/repo
  PLATFORMS: linux/amd64,linux/arm64,linux/arm/v7    # multi-arch (RPi ok)
  DOCKER_TAG: infra                                   # tag fixe pour la branche infra

jobs:
  hello:
    name: Smoke test - Hello World
    runs-on: ubuntu-latest
    steps:
      - name: Say hello
        run: echo "✅ Hello World depuis la CI (branche infra) !"

  frontend:
    name: Frontend - Lint & Build (Angular)
    runs-on: ubuntu-latest
    needs: hello
    defaults:
      run:
        working-directory: code/takata_frontend
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'code/takata_frontend/package-lock.json'

      - name: Install deps
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Tests (optionnel)
        run: npm test -- --watch=false --browsers=ChromeHeadless || true

      - name: Build prod
        run: npm run build -- --configuration production || echo "Build Angular a échoué mais on continue"

  backend:
    name: Backend - Tests & Package (Spring Boot)  # tolérant
    runs-on: ubuntu-latest
    needs: hello
    continue-on-error: true            # <-- le job ne fera pas échouer le workflow
    defaults:
      run:
        working-directory: code/takata_backend
    steps:
      - uses: actions/checkout@v4

      - name: Afficher le contenu (diagnostic)
        run: |
          pwd
          ls -la || true

      # Java 21
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: 'maven'

      - name: Set MAVEN_OPTS
        run: echo "MAVEN_OPTS=-Xmx1g -Dfile.encoding=UTF-8" >> $GITHUB_ENV

      - name: Tests (non bloquants)
        run: mvn -B -DskipITs test || echo "Tests backend en échec, on continue"

      - name: Package JAR (non bloquant)
        run: mvn -B -DskipTests package || echo "ackage backend en échec, on continue"

      - name: Upload test reports (si dispo)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: |
            code/takata_backend/target/surefire-reports/**
            code/takata_backend/target/failsafe-reports/**
          if-no-files-found: ignore

  build-and-push:
    name: Buildx multi-arch & Push images (:infra)
    runs-on: ubuntu-latest
    needs: [ frontend ]               
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      
      - name: Meta backend
        id: meta_backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-backend
          tags: |
            type=raw,value=${{ env.DOCKER_TAG }}
            type=sha,prefix=sha-,format=short
            type=ref,event=branch

      - name: Meta frontend
        id: meta_frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-frontend
          tags: |
            type=raw,value=${{ env.DOCKER_TAG }}
            type=sha,prefix=sha-,format=short
            type=ref,event=branch

      # IMPORTANT :
      # Ici on build les images directement depuis les dossiers source.
      # Tes Dockerfile doivent savoir construire (multi-stage) sans dépendre d'artefacts pré-générés.
      # - ./code/takata_backend/Dockerfile : mvn package à l'intérieur (multi-stage)
      # - ./code/takata_frontend/Dockerfile : npm build à l'intérieur (multi-stage) ou copier dist/ si présent.
      - name: Build & Push backend
        uses: docker/build-push-action@v6
        with:
          context: ./code/takata_backend
          file: ./code/takata_backend/Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}

      - name: Build & Push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./code/takata_frontend
          file: ./code/takata_frontend/Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.meta_frontend.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}
